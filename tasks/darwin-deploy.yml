
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - temp_folder
  - installation_folder
  - clear_temp_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - dmg_installer_file_name
  - s3_download_url
  - extra_java_options
  - launcher_file_name

# stop old service

- name: stop selenium agent service
  shell: "/bin/kill $(ps -ef | grep selenium_agent_server | grep -v grep | awk '{print $2}' | xargs)"
  become: yes
  changed_when: no
  failed_when: no
  ignore_errors: yes


# - name: wait for 10 seconds
#   pause:
#     seconds: 10


  ## need to check weather it requires to stop ?
- name: stop other service
  shell: "/bin/kill -9 $(ps -ef | grep {{ item }} | grep -v grep | awk '{print $2}' | xargs)"
  with_items:
    - selenium_agent_server
    - selenium_grid_node
    - manual.*.jar
    - watch
    - safaridriver
  become: yes
  changed_when: no
  failed_when: no
  ignore_errors: yes

# delete old installation (optional)

- name: clear old installation folder
  file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install | default('no') | bool

# unpack and copy all the files and add volumes

- name: make sure installation folder exists
  file:
    path: "{{ installation_folder }}"
    state: directory
  become_user: "{{ ansible_user_id }}"
  become: yes

- name: attach the dmg file
  block:

    - name: check if disk is attached
      stat:
        path: /Volumes/selenium_agent
      register: stat_result

    - name: unmount the attached disk
      command: hdiutil unmount /Volumes/selenium_agent -force
      when: stat_result.stat.exists
      ignore_errors: yes

    - name: detach old disks
      command: /bin/bash -c "diskutil list | grep selenium_agent | awk '{print $5}' | xargs -I {} sh -c "hdiutil detach {}""
      ignore_errors: yes

    - name: attach new disk
      command: "hdiutil attach {{ temp_folder }}/{{ (dmg_installer_file_name | splitext)[0] }}.dmg"

  become: yes

# check if server.varfile already exists
- name: check if the server.varfile exists
  stat:
    path: "{{ installation_folder }}/.install4j/server.varfile"
  register: server_varfile

# copy varfile to server.varfile
- name: copy installer varfile to server.varfile
  copy:
    src: "{{ temp_folder }}/{{ (dmg_installer_file_name | splitext)[0] }}.varfile"
    dest: "{{ installation_folder }}/.install4j/server.varfile"
    mode: 0644
    force: yes
    remote_src: yes
  become: yes
  when: server_varfile.stat.exists

# start installation

- name: make sure installation logs folder exists
  file:
    path: "{{ temp_folder }}/installation-logs"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: get machine ram
  command: /usr/sbin/sysctl -n hw.memsize
  register: ram_command

- name: starting silent Installation
  shell: "/Volumes/selenium_agent/SeeTest\\ Selenium\\ Agent\\ Installer.app/Contents/MacOS/JavaApplicationStub -q -varfile {{ temp_folder }}/{{ (dmg_installer_file_name | splitext)[0] }}.varfile -Dinstall4j.alternativeLogfile={{ temp_folder }}/installation-logs/{{ ansible_date_time.epoch }}.log -Dinstall4j.keepLog=true"
  environment:
    SELENIUM_RAM: "{{ ram_command.stdout }}"
  args:
    executable: /bin/bash
  async: 300
  poll: 0
  register: installer_sync
  become_user: "{{ ansible_user_id }}"
  become: yes

- name: wait for installer
  async_status:
    jid: "{{ installer_sync.ansible_job_id }}"
  register: wait_for_installer
  until: wait_for_installer.finished
  retries: 30
  delay: 10
  become_user: "{{ ansible_user_id }}"
  become: yes
  ignore_errors: yes

- name: check the Installation logs
  shell: "tail -1 {{ temp_folder }}/installation-logs/{{ ansible_date_time.epoch }}.log | awk {'print $1'}"
  args:
    executable: /bin/bash
  register: readlogs
  become: yes

- assert:
    success_msg: "Installation completed successfully"
    fail_msg: "Failed: not found Finished status in {{ temp_folder }}/installation-logs/{{ ansible_date_time.epoch }}.log file"
    that: readlogs.stdout == "Finished"

# stop service

# /bin/kill -9 $(ps -ef | grep selenium_agent_server | grep -v grep | awk '{print $2}' | xargs)
# /bin/kill -9 $(ps -ef | grep selenium_grid_node | grep -v grep | awk '{print $2}' | xargs)
# /bin/kill -9 $(ps -ef | grep manual.*.jar | grep -v grep | awk '{print $2}' | xargs)
# /bin/kill -9 $(ps -ef | grep watch | grep -v grep | awk '{print $2}' | xargs)
# /bin/kill -9 $(ps -ef | grep safaridriver | grep -v grep | awk '{print $2}' | xargs)

# configure installed 

- name: update application properties file
  lineinfile:
    path: "{{ installation_folder }}/config/application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: update logback properties file
  lineinfile:
    path: "{{ installation_folder }}/config/logback.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ logback_properties }}"
  become: yes

- name: update vmoptions file
  lineinfile:
    path: "{{ installation_folder }}/selenium_agent_server.vmoptions"
    line: "{{ item }}"
    regexp: "^{{ item }}"
  with_items: "{{ extra_java_options }}"
  become_user: "{{ ansible_user_id }}"
  become: yes
  
# enable / disable proxy tunneling

- name: enable proxy tunneling if true
  command: "{{ item }}"
  with_items:
    - /usr/sbin/networksetup -setwebproxystate Ethernet on
    - /usr/sbin/networksetup -setsecurewebproxystate Ethernet on
  become: yes
  when: enable_tunneling

- name: disable proxy tunneling if false
  command: "{{ item }}"
  with_items:
    - /usr/sbin/networksetup -setwebproxystate Ethernet off
    - /usr/sbin/networksetup -setsecurewebproxystate Ethernet off
  become: yes
  when: not enable_tunneling

# reboot selenium agent

- name: reboot selenium agent
  reboot:
    reboot_timeout: "{{ reboot_timeout | default(600) }}"
  become: yes
  when: reboot_after_install == True

- name: wait for experiusers login
  wait_for_connection:
    delay: 60
    timeout: 300

# notify handlers

- name: notify handlers
  command: "echo notify handlers"
  notify:
    - start the service

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      installation_folder: "{{ installation_folder }}"
      service_plist_file_path: "{{ service_plist_file_path }}"
