
# validation

- name: assert all vars are set
  assert: 
    that:
      - item is defined
      - item | length > 0
    quiet: true
  loop:
  - temp_folder
  - installation_folder
  - clear_temp_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - dmg_installer_file_name
  - s3_download_url
  - extra_java_options
  - launcher_file_name

# required dependencies

- name: ram test
  block:

    - name: get machine ram
      command: /usr/sbin/sysctl -n hw.memsize
      register: ram_command

    - name: perform ram test
      assert:
        that: ram_command.stdout|int >= 8589934592
        success_msg: "ram test passed: {{ ram_command.stdout }} >= 8589934592"
        fail_msg: "ram test failed: {{ ram_command.stdout }} >= 8589934592"

# set temp folder

- name: make sure temp folder
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

# download the file

- name: download from s3 url
  get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    use_proxy: "{{ download_use_proxy | default('no') }}"
  when: custom_download_url == ""

- name: download from custom url
  get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    use_proxy: "{{ download_use_proxy | default('no') }}"
  when: custom_download_url != ""


# unzip installer file

- name: unzip the file
  unarchive:
    src: "{{ temp_folder }}/{{ installer_file_name }}"
    dest: "{{ temp_folder }}"
    remote_src: yes
    creates: "{{ temp_folder }}/{{ (dmg_installer_file_name | splitext)[0] }}.dmg"
    owner: "{{ ansible_user_id }}"
  become: yes

# copy var file

- name: copy var file
  template:
    src: agent.varfile.j2
    dest: "{{ temp_folder }}/{{ (dmg_installer_file_name | splitext)[0] }}.varfile"

# # copy plist  - not required
# 
# - name: copy selenium agent plist
#   template:
#     src: service.plist.j2
#     dest: "{{ service_plist_file_path }}"

# external proxy

- name: add external proxy
  lineinfile:
    path: "{{ temp_folder }}/{{ (dmg_installer_file_name | splitext)[0] }}.varfile"
    line: "{{ item }}"
    regexp: "^{{ item }}"
  with_items:
    - externalProxyHost={{ external_proxy_host | default('localhost') }}
    - externalProxyPort={{ external_proxy_port | default('8080') }}
    - externalProxyUser={{ external_proxy_user | default('') }}
    - externalProxyPassword={{ external_proxy_password | default('') }}
  become: yes
  when: use_external_proxy == True
