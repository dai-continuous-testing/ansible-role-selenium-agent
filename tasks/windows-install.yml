
# validation

- name: assert all vars are set
  assert: 
    that:
      - item is defined
      - item | length > 0
    quiet: true
  loop:
  - temp_folder
  - installation_folder
  - clear_temp_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - s3_download_url
  - extra_java_options
  - launcher_file_name
  - kill_notepad

# required dependencies


# set temp folder

- name: make sure temp folder exists
  win_file:
    path: "{{ temp_folder }}"
    state: directory

# download the file

- name: download from s3 url
  win_get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
    use_proxy: "{{ download_use_proxy | default('no') }}"
  when: custom_download_url == ""

- name: download from custom url
  win_get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
    force_basic_auth: yes
    url_username: "{{ custom_download_username }}"
    url_password: "{{ custom_download_password }}"
    use_proxy: "{{ download_use_proxy | default('no') }}"
  when: custom_download_url != ""

# copy var file

- name: copy var file
  win_template:
    src: agent.varfile.j2
    dest: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}.varfile"

# external proxy

- name: add external proxy
  win_lineinfile:
    path: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}.varfile"
    line: "{{ item }}"
    regexp: "^{{ item }}"
  with_items:
    - externalProxyHost={{ external_proxy_host | default('localhost') }}
    - externalProxyPort={{ external_proxy_port | default('8080') }}
    - externalProxyUser={{ external_proxy_user | default('') }}
    - externalProxyPassword={{ external_proxy_password | default('') }}
  become: yes
  when: use_external_proxy == True
